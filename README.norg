@document.meta
title: Personal guide
description: A personal guide of useful commands and issues solutions in Neorg
author: Pablo Avilés
categories: 
created: 2024-06-15
version: 0.1
@end

.toc

* Personal guide

This repository aims to keep track of every installation/process I make in my setups. This way, I can always come here and check how I did something.

** Set pcmanfm as default file manager:
  Execute
  @code bash
  xdg-mime default pcmanfm.desktop inode/directory application/x-gnome-saved-search
  @end

** Mount partition

  The command `fdisk -l` lists all disk partitions available. When desired partition is chosen, e.g. `/dev/sdb2`, create directory where it will be mounted: 
  @code bash
  sudo mkdir /mnt/disk1
  @end
  then mount it with 
  @code bash
  sudo mount -t auto -v /dev/sdb2 /mnt/disk1/
  @end
  Unmount it with
  @code bash
  sudo umount /deb/sdb2 -l
  @end

** Create symbolic link of all files in a directory (if you're in the actual directory):

  The command 
  @code bash
  ln -s -r * ~/.local/bin/
  @end
  will link all files in directory to the path `~/.local/bin`.


** Install ueberzug to preview images in ranger (Fedora):

  - When it was maintained:
    Install dependencies:
  @code bash
  sudo dnf install python3-devel libXxf86vm-devel
  @end

  Install ueberzug: 
  @code bash
  pip install ueberzug
  @end

  - Now that it is unmaintained, this is how to install it: (replace `apt` and its packages with the required ones) 
  @code bash
  sudo apt install libxext-dev libx11-dev -y
  git clone --depth 1 --branch 18.1.9 https://github.com/seebye/ueberzug.git
  cd ueberzug
  sudo python3 setup.py install
  @end

** Qalculate use period (.) instead of comma (,):

  In file `~/.config/qalculate/qalc.cfg`, write `decimal_comma=0`. Set it to `-1` to ignore setting (use system's locale) or to `1` (to enable .).

** Rename Enter key

  Enter key was named `KP_Enter`, instead of `Return`, so with command (requires `xmodmap`)
  @code bash
  xmodmap -e "keysym KP_Enter = Return"
  @end
  it's now solved. 

** Install `waybar` from source

  To install `waybar` git version, `git clone` waybar repository, `meson build -Dexperimental=true` and `ninja build` +  `install`.  

** Arch Linux specific commands

*** Update pacman mirrors

   @code bash
   sudo reflector --country 'Spain' --latest 5 --age 2 --fastest 5 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
   @end

** Replace two colors in svg
  @code bash
  cp calendar.svg calendar2.svg; sed -i 's/#ff0000/#5EAAE8/g' calendar2.svg; sed -i 's/#00ffff/#AAC690/g' calendar2.svg
  @end

** Enable hw acceleration for NVIDIA:

  Use this {https://danilw.github.io/blog/nvidia_linux_gpu_video_accceleration_webbrowsers/#short-insrtuction-to-nvidia-vaapi-driver}[link]

** Troubleshoot `xdg-desktop-portal` issues

  For example, no file chooser dialog opens in flatpak apps:
  @code bash
  /usr/lib64/xdg-desktop-portal -rv
  @end

** No wayland sessions show in gdm

  Probably related to NVIDIA card and using `optimus-manager`. To fix it ({https://www.reddit.com/r/debian/comments/149jx0y/comment/jo62jsk/?utm_source=share&utm_medium=mweb3x&utm_name=mweb3xcss&utm_term=1&utm_content=share_button}[source]):
  1. check `/etc/gdm3/custom.conf`, if there's a line `#WaylandEnable=false`, it needs to be uncommented and set to `true`.
  2. check `/usr/lib/udev/rules.d/61-gdm.rules`, comment these lines: `#RUN+="/usr/lib/gdm-runtime-config set daemon PreferredDisplayServer xorg"` and `#RUN+="/usr/lib/gdm-runtime-config set daemon WaylandEnable false"`

** Enable launch using discrete graphics in GNOME

  When done, only right-clicking in application is needed to launch with `prime-run`. First, install `switcheroo-control`:
  @code bash
  sudo pacman -S switcheroo-control
  @end
  Then, just run
  @code bash
  systemctl enable switcheroo-control.service
  systemctl start switcheroo-control.service
  @end
  In fedora, it is included by default

** Black wallpaper after suspend on GNOME

  As stated {https://forums.developer.nvidia.com/t/fixed-suspend-resume-issues-with-the-driver-version-470/187150/3}[here] the workaround is: 
  @code bash
  sudo systemctl stop nvidia-suspend.service
  sudo systemctl stop nvidia-hibernate.service
  sudo systemctl stop nvidia-resume.service

  sudo systemctl disable nvidia-suspend.service
  sudo systemctl disable nvidia-hibernate.service
  sudo systemctl disable nvidia-resume.service

  sudo mv /lib/systemd/system-sleep/nvidia ~/nvidia.bak
  @end
  and reboot. Original content of `nvidia.bak` is
  @code bash
  #!/bin/sh

  case "$1" in
  post)
  /usr/bin/nvidia-sleep.sh "resume"
  ;;
  esac
  @end
  Thing above didn't work always.

** NVIDIA as primary GPU in GNOME

  One can use NVIDIA as primary GPU in GNOME (`mutter`) using a `udev` rule: in file `/usr/lib/udev/rules.d/61-mutter-primary-gpu.rules`
  @code
  ENV{DEVNAME}=="/dev/dri/card1", TAG+="mutter-device-preferred-primary"
  @end
  Alternatively, one can choose the card by pci (so that it doesn't fail). The `tag` is given by
  @code bash
  udevadm info --query=property --property=ID_PATH_TAG /dev/dri/card1
  @end
  and then just set it to `ENV{DEVLINKS}=="/dev/dri/by-path/pci-<card>-card", TAG+="mutter-device-preferred-primary"`, which would be
  @code
  ENV{DEVNAME}=="/dev/dri/by-path/pci-0000\:00\:02.0-card",
  TAG+="mutter-device-preferred-primary"
  @end

** using NVIDIA as primary GNOME GPU

  Suspend works really bad in this scenario, so I tried the following:

  `gnome-shell` is trying to talk to the NVIDIA driver after it has already gone into suspend, so it can’t respond. Linux tries to freeze the task, but fails because `gnome-shell` is waiting for a response from the driver and can’t be frozen.

  The solution is to manually suspend `gnome-shell` using the STOP signal before the NVIDIA driver goes to suspend. Then use the `CONT` signal on resume.

  `/usr/local/bin/suspend-gnome-shell.sh`
  @code bash
  #!/bin/bash

  case "$1" in
  suspend)
  killall -STOP gnome-shell
  ;;
  resume)
  killall -CONT gnome-shell
  ;;
  esac
  @end
  As this is a script it needs executable permissions:
  @code bash
  sudo chmod +x /usr/local/bin/suspend-gnome-shell.sh
  @end

  `/etc/systemd/system/gnome-shell-suspend.service`
  @code ini
  [Unit]
  Description=Suspend gnome-shell
  Before=systemd-suspend.service
  Before=systemd-hibernate.service
  Before=nvidia-suspend.service
  Before=nvidia-hibernate.service

  [Service]
  Type=oneshot
  ExecStart=/usr/local/bin/suspend-gnome-shell.sh suspend

  [Install]
  WantedBy=systemd-suspend.service
  WantedBy=systemd-hibernate.service
  @end

  `/etc/systemd/system/gnome-shell-resume.service`
  @code ini
  [Unit]
  Description=Resume gnome-shell
  After=systemd-suspend.service
  After=systemd-hibernate.service
  After=nvidia-resume.service

  [Service]
  Type=oneshot
  ExecStart=/usr/local/bin/suspend-gnome-shell.sh resume

  [Install]
  WantedBy=systemd-suspend.service
  WantedBy=systemd-hibernate.service
  @end
  Then just enable the two new systemd units:
  @code bash
  systemctl daemon-reload
  systemctl enable gnome-shell-suspend
  systemctl enable gnome-shell-resume
  @end
  This should interrupt gnome-shell in time so it’s not trying to access the graphics hardware. It worked for me.

** Crear una máquina virtual (VM) de Nixos

  Al crear la máquina virtual de `Nixos` en `virt-manager`, darle a personalizar antes de crear la VM. En el menú recién abierto, poner el arranque en UEFI (NO EN BIOS).

** Winapps

  Algunos errores:
  - El servicio `iptables` no estaba activado, así que la conexión no funcionaba. Para habilitarlo,
  @code bash
  sudo systemctl enable iptables.service
  @end
  - Rendimiento muy malo: usar las mejoras de {https://www.reddit.com/r/ChromeOSFlex/comments/ucno4b/comment/i6cviv8/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button}[farmerbb]
